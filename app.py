import streamlit as st
import pandas as pd
import numpy as np
from gensim.models import Doc2Vec
from sklearn.preprocessing import MinMaxScaler
import pickle
from sklearn.metrics.pairwise import cosine_similarity

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–µ–π
@st.cache_resource
def load_resources():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    games_df = pd.read_parquet("source/games.parquet")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    doc2vec_model = Doc2Vec.load("models/doc2vec.model")
    with open("models/scaler.pkl", "rb") as f:
        scaler = pickle.load(f)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    combined_features = np.load("models/combined_features.npy")
    
    return games_df, doc2vec_model, scaler, combined_features

games_df, doc2vec_model, scaler, combined_features = load_resources()

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def recommend(game_title, top_n=10):
    try:
        idx = games_df[games_df['title'].str.lower() == game_title.lower()].index[0]
        target_vector = combined_features[idx].reshape(1, -1)
        similarities = cosine_similarity(target_vector, combined_features)[0]
        similar_indices = similarities.argsort()[::-1][1:top_n+1]
        return games_df.iloc[similar_indices][['title', 'original_price', 'reviews_summary', 'developer']]
    except:
        return pd.DataFrame()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üéÆ Game Recommendation Engine")
st.write("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–∏–¥–µ–æ–∏–≥—Ä")

# –ü–æ–∏—Å–∫ –∏–≥—Ä—ã
game_title = st.selectbox(
    '–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:',
    games_df['title'].sort_values().unique())

if st.button('–ù–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'):
    with st.spinner('–ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏–≥—Ä—ã...'):
        recommendations = recommend(game_title)
        
    if not recommendations.empty:
        st.success(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã '{game_title}':")
        for i, row in recommendations.iterrows():
            st.markdown(f"""
            **{row['title']}**  
            *–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫*: {row['developer']}  
            *–¶–µ–Ω–∞*: {row['original_price']}  
            *–û—Ç–∑—ã–≤—ã*: {row['reviews_summary']}
            """)
            st.divider()
    else:
        st.error("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

st.caption("¬© 2024 Game Recommendations. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.")